---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agnostics-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      name: agnostics-redis
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: agnostics-redis
    spec:
      containers:
        - name: redis
          image: {{ .Values.redis.image.repository }}:{{ .Values.redis.image.tag }}
          imagePullPolicy: {{ .Values.redis.image.pullPolicy }}
          command:
            - redis-server
            - /etc/redis.conf
            - --loadmodule
            - /usr/lib/redis/modules/rejson.so
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: agnostics-redis
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: {{ .Values.redis.port }}
            timeoutSeconds: 1
          ports:
            - containerPort: {{ .Values.redis.port }}
              protocol: TCP
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /data
              name: agnostics-redis-data
            - mountPath: /etc/redis.conf
              subPath: redis.conf
              name: agnostics-redis-config

      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: agnostics-redis-data
        persistentVolumeClaim:
          claimName: agnostics-redis
      - name: agnostics-redis-config
        configMap:
          name: agnostics-redis-config
