openapi: "3.0.3"
info:
  version: 1.0.0
  title: Scheduler
  license:
    name: MIT
servers:
  - url: http://scheduler.open.redhat.com/api/v1
paths:
  /repo:
    get:
      summary: Get local information about the config repository used by the scheduler.
      operationId: repo
      tags:
        - config
      responses:
        '200':
          description: The message containing information about the config repository.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GitCommit"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Force the server to refresh the scheduler config from Git.
      description: Force server to pull latest changes from the git repository. This operation is asynchronous. The server will always aknowledge that the request for updating the repository has been made.
      operationId: repopull
      tags:
        - config
      responses:
        '200':
          description: A message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /schedule:
    post:
      summary: Request schedule of all available clouds matching selector (predicates with labels) and preferences (priorities with labels)
      operationId: schedule
      tags:
        - schedule
      requestBody:
        description: JSON object to specify selectors and priorities
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CloudQuery"
      responses:
        '200':
          description: The cloud you can use to deploy.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cloud"
        '404':
          description: NotFound
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /clouds:
    get:
      summary: List all clouds
      operationId: listCloudsAll
      tags:
        - clouds
      responses:
        '200':
          description: An array of clouds
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Clouds"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /clouds/{cloudName}:
    get:
      summary: Information about a specific cloud
      operationId: showCloudByName
      tags:
        - clouds
      parameters:
        - name: cloudName
          in: path
          required: true
          description: The name of the cloud to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cloud"
        '404':
          description: NotFound
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Cloud:
      type: object
      required:
        - name
        - label
      properties:
        name:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
    Clouds:
      type: array
      items:
        $ref: "#/components/schemas/Cloud"
    CloudQuery:
      type: object
      properties:
        cloud_selector:
          description: This dictionary describes the labels (key:value) that must be present in the clouds in order to be selected by the scheduler.
          type: object
          additionalProperties:
            type: string
        cloud_preference:
          type: object
          description: This dictionary describes the labels (key:value) that you would like to be present in the clouds in order to be selected by the scheduler. They change the priority and thus the clouds matching those labels will be selected first.
          additionalProperties:
            type: string

    Message:
      type: object
      required:
        - message
      properties:
        message:
          type: string

    GitCommit:
      type: object
      required:
        - hash
        - author
        - date
      properties:
        hash:
          type: string
          description: Hash of the commit
        author:
          type: string
        date:
          description: Date of the signature of the commit. Date is UTC.
          type: string
          format: date-time

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
